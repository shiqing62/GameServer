// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vec3 } from '../../game/common/vec3.js';


export class BossSnapshotSyncsPush {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BossSnapshotSyncsPush {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBossSnapshotSyncsPush(bb:flatbuffers.ByteBuffer, obj?:BossSnapshotSyncsPush):BossSnapshotSyncsPush {
  return (obj || new BossSnapshotSyncsPush()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBossSnapshotSyncsPush(bb:flatbuffers.ByteBuffer, obj?:BossSnapshotSyncsPush):BossSnapshotSyncsPush {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BossSnapshotSyncsPush()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bossId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hp():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

pos(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

direction(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startBossSnapshotSyncsPush(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addBossId(builder:flatbuffers.Builder, bossId:number) {
  builder.addFieldInt32(0, bossId, 0);
}

static addHp(builder:flatbuffers.Builder, hp:number) {
  builder.addFieldFloat32(1, hp, 0.0);
}

static addPos(builder:flatbuffers.Builder, posOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, posOffset, 0);
}

static addDirection(builder:flatbuffers.Builder, directionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, directionOffset, 0);
}

static endBossSnapshotSyncsPush(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishBossSnapshotSyncsPushBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedBossSnapshotSyncsPushBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
