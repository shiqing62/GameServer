"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.TakeBossDamageResponse = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var TakeBossDamageResponse = /** @class */ (function () {
    function TakeBossDamageResponse() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TakeBossDamageResponse.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TakeBossDamageResponse.getRootAsTakeBossDamageResponse = function (bb, obj) {
        return (obj || new TakeBossDamageResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TakeBossDamageResponse.getSizePrefixedRootAsTakeBossDamageResponse = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TakeBossDamageResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TakeBossDamageResponse.prototype.uid = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    TakeBossDamageResponse.prototype.damage = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    TakeBossDamageResponse.prototype.skillId = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    TakeBossDamageResponse.startTakeBossDamageResponse = function (builder) {
        builder.startObject(3);
    };
    TakeBossDamageResponse.addUid = function (builder, uid) {
        builder.addFieldInt32(0, uid, 0);
    };
    TakeBossDamageResponse.addDamage = function (builder, damage) {
        builder.addFieldFloat32(1, damage, 0.0);
    };
    TakeBossDamageResponse.addSkillId = function (builder, skillId) {
        builder.addFieldInt32(2, skillId, 0);
    };
    TakeBossDamageResponse.endTakeBossDamageResponse = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TakeBossDamageResponse.finishTakeBossDamageResponseBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    TakeBossDamageResponse.finishSizePrefixedTakeBossDamageResponseBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    TakeBossDamageResponse.createTakeBossDamageResponse = function (builder, uid, damage, skillId) {
        TakeBossDamageResponse.startTakeBossDamageResponse(builder);
        TakeBossDamageResponse.addUid(builder, uid);
        TakeBossDamageResponse.addDamage(builder, damage);
        TakeBossDamageResponse.addSkillId(builder, skillId);
        return TakeBossDamageResponse.endTakeBossDamageResponse(builder);
    };
    return TakeBossDamageResponse;
}());
exports.TakeBossDamageResponse = TakeBossDamageResponse;
