// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class FloatValue {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FloatValue {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFloatValue(bb:flatbuffers.ByteBuffer, obj?:FloatValue):FloatValue {
  return (obj || new FloatValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFloatValue(bb:flatbuffers.ByteBuffer, obj?:FloatValue):FloatValue {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FloatValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

v():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startFloatValue(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addV(builder:flatbuffers.Builder, v:number) {
  builder.addFieldFloat32(0, v, 0.0);
}

static endFloatValue(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFloatValue(builder:flatbuffers.Builder, v:number):flatbuffers.Offset {
  FloatValue.startFloatValue(builder);
  FloatValue.addV(builder, v);
  return FloatValue.endFloatValue(builder);
}
}
