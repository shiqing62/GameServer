"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParamValue = void 0;
exports.unionToParamValue = unionToParamValue;
exports.unionListToParamValue = unionListToParamValue;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var bool_value_js_1 = require("../../game/common/bool-value.js");
var float4_value_js_1 = require("../../game/common/float4-value.js");
var float_value_js_1 = require("../../game/common/float-value.js");
var int_value_js_1 = require("../../game/common/int-value.js");
var uint_value_js_1 = require("../../game/common/uint-value.js");
var vec3_value_js_1 = require("../../game/common/vec3-value.js");
var ParamValue;
(function (ParamValue) {
    ParamValue[ParamValue["NONE"] = 0] = "NONE";
    ParamValue[ParamValue["IntValue"] = 1] = "IntValue";
    ParamValue[ParamValue["UIntValue"] = 2] = "UIntValue";
    ParamValue[ParamValue["FloatValue"] = 3] = "FloatValue";
    ParamValue[ParamValue["BoolValue"] = 4] = "BoolValue";
    ParamValue[ParamValue["Vec3Value"] = 5] = "Vec3Value";
    ParamValue[ParamValue["Float4Value"] = 6] = "Float4Value";
})(ParamValue || (exports.ParamValue = ParamValue = {}));
function unionToParamValue(type, accessor) {
    switch (ParamValue[type]) {
        case 'NONE': return null;
        case 'IntValue': return accessor(new int_value_js_1.IntValue());
        case 'UIntValue': return accessor(new uint_value_js_1.UIntValue());
        case 'FloatValue': return accessor(new float_value_js_1.FloatValue());
        case 'BoolValue': return accessor(new bool_value_js_1.BoolValue());
        case 'Vec3Value': return accessor(new vec3_value_js_1.Vec3Value());
        case 'Float4Value': return accessor(new float4_value_js_1.Float4Value());
        default: return null;
    }
}
function unionListToParamValue(type, accessor, index) {
    switch (ParamValue[type]) {
        case 'NONE': return null;
        case 'IntValue': return accessor(index, new int_value_js_1.IntValue());
        case 'UIntValue': return accessor(index, new uint_value_js_1.UIntValue());
        case 'FloatValue': return accessor(index, new float_value_js_1.FloatValue());
        case 'BoolValue': return accessor(index, new bool_value_js_1.BoolValue());
        case 'Vec3Value': return accessor(index, new vec3_value_js_1.Vec3Value());
        case 'Float4Value': return accessor(index, new float4_value_js_1.Float4Value());
        default: return null;
    }
}
