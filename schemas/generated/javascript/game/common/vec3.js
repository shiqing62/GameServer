"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vec3 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var Vec3 = /** @class */ (function () {
    function Vec3() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Vec3.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Vec3.getRootAsVec3 = function (bb, obj) {
        return (obj || new Vec3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Vec3.getSizePrefixedRootAsVec3 = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Vec3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Vec3.prototype.x = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Vec3.prototype.y = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Vec3.prototype.z = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Vec3.startVec3 = function (builder) {
        builder.startObject(3);
    };
    Vec3.addX = function (builder, x) {
        builder.addFieldFloat32(0, x, 0.0);
    };
    Vec3.addY = function (builder, y) {
        builder.addFieldFloat32(1, y, 0.0);
    };
    Vec3.addZ = function (builder, z) {
        builder.addFieldFloat32(2, z, 0.0);
    };
    Vec3.endVec3 = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Vec3.createVec3 = function (builder, x, y, z) {
        Vec3.startVec3(builder);
        Vec3.addX(builder, x);
        Vec3.addY(builder, y);
        Vec3.addZ(builder, z);
        return Vec3.endVec3(builder);
    };
    return Vec3;
}());
exports.Vec3 = Vec3;
