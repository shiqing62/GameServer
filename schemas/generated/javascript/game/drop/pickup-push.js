"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.PickupPush = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var PickupPush = /** @class */ (function () {
    function PickupPush() {
        this.bb = null;
        this.bb_pos = 0;
    }
    PickupPush.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    PickupPush.getRootAsPickupPush = function (bb, obj) {
        return (obj || new PickupPush()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PickupPush.getSizePrefixedRootAsPickupPush = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PickupPush()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PickupPush.prototype.uid = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    PickupPush.prototype.itemId = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PickupPush.prototype.instanceId = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PickupPush.startPickupPush = function (builder) {
        builder.startObject(3);
    };
    PickupPush.addUid = function (builder, uid) {
        builder.addFieldInt32(0, uid, 0);
    };
    PickupPush.addItemId = function (builder, itemId) {
        builder.addFieldInt32(1, itemId, 0);
    };
    PickupPush.addInstanceId = function (builder, instanceId) {
        builder.addFieldInt32(2, instanceId, 0);
    };
    PickupPush.endPickupPush = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    PickupPush.createPickupPush = function (builder, uid, itemId, instanceId) {
        PickupPush.startPickupPush(builder);
        PickupPush.addUid(builder, uid);
        PickupPush.addItemId(builder, itemId);
        PickupPush.addInstanceId(builder, instanceId);
        return PickupPush.endPickupPush(builder);
    };
    return PickupPush;
}());
exports.PickupPush = PickupPush;
