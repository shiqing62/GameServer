"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.GMCommand = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var gmdata_js_1 = require("../../game/gm/gmdata.js");
var gmtype_js_1 = require("../../game/gm/gmtype.js");
var GMCommand = /** @class */ (function () {
    function GMCommand() {
        this.bb = null;
        this.bb_pos = 0;
    }
    GMCommand.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    GMCommand.getRootAsGMCommand = function (bb, obj) {
        return (obj || new GMCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GMCommand.getSizePrefixedRootAsGMCommand = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GMCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GMCommand.prototype.gmType = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : gmtype_js_1.GMType.DropItem;
    };
    GMCommand.prototype.gmDataType = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : gmdata_js_1.GMData.NONE;
    };
    GMCommand.prototype.gmData = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    GMCommand.startGMCommand = function (builder) {
        builder.startObject(3);
    };
    GMCommand.addGmType = function (builder, gmType) {
        builder.addFieldInt8(0, gmType, gmtype_js_1.GMType.DropItem);
    };
    GMCommand.addGmDataType = function (builder, gmDataType) {
        builder.addFieldInt8(1, gmDataType, gmdata_js_1.GMData.NONE);
    };
    GMCommand.addGmData = function (builder, gmDataOffset) {
        builder.addFieldOffset(2, gmDataOffset, 0);
    };
    GMCommand.endGMCommand = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    GMCommand.finishGMCommandBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    GMCommand.finishSizePrefixedGMCommandBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    GMCommand.createGMCommand = function (builder, gmType, gmDataType, gmDataOffset) {
        GMCommand.startGMCommand(builder);
        GMCommand.addGmType(builder, gmType);
        GMCommand.addGmDataType(builder, gmDataType);
        GMCommand.addGmData(builder, gmDataOffset);
        return GMCommand.endGMCommand(builder);
    };
    return GMCommand;
}());
exports.GMCommand = GMCommand;
