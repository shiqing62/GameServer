"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chunk = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var prop_js_1 = require("../../game/map/prop.js");
var Chunk = /** @class */ (function () {
    function Chunk() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Chunk.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Chunk.getRootAsChunk = function (bb, obj) {
        return (obj || new Chunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Chunk.getSizePrefixedRootAsChunk = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Chunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Chunk.prototype.x = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Chunk.prototype.y = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Chunk.prototype.props = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new prop_js_1.Prop()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Chunk.prototype.propsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Chunk.startChunk = function (builder) {
        builder.startObject(3);
    };
    Chunk.addX = function (builder, x) {
        builder.addFieldInt32(0, x, 0);
    };
    Chunk.addY = function (builder, y) {
        builder.addFieldInt32(1, y, 0);
    };
    Chunk.addProps = function (builder, propsOffset) {
        builder.addFieldOffset(2, propsOffset, 0);
    };
    Chunk.createPropsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Chunk.startPropsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Chunk.endChunk = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Chunk.createChunk = function (builder, x, y, propsOffset) {
        Chunk.startChunk(builder);
        Chunk.addX(builder, x);
        Chunk.addY(builder, y);
        Chunk.addProps(builder, propsOffset);
        return Chunk.endChunk(builder);
    };
    return Chunk;
}());
exports.Chunk = Chunk;
