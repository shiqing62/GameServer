// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Prop } from '../../game/map/prop.js';


export class Chunk {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Chunk {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChunk(bb:flatbuffers.ByteBuffer, obj?:Chunk):Chunk {
  return (obj || new Chunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChunk(bb:flatbuffers.ByteBuffer, obj?:Chunk):Chunk {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Chunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

props(index: number, obj?:Prop):Prop|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Prop()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

propsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startChunk(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldInt32(0, x, 0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldInt32(1, y, 0);
}

static addProps(builder:flatbuffers.Builder, propsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, propsOffset, 0);
}

static createPropsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPropsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endChunk(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createChunk(builder:flatbuffers.Builder, x:number, y:number, propsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Chunk.startChunk(builder);
  Chunk.addX(builder, x);
  Chunk.addY(builder, y);
  Chunk.addProps(builder, propsOffset);
  return Chunk.endChunk(builder);
}
}
