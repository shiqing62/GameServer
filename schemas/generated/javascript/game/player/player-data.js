"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerData = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var vec3_js_1 = require("../../game/common/vec3.js");
var PlayerData = /** @class */ (function () {
    function PlayerData() {
        this.bb = null;
        this.bb_pos = 0;
    }
    PlayerData.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    PlayerData.getRootAsPlayerData = function (bb, obj) {
        return (obj || new PlayerData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PlayerData.getSizePrefixedRootAsPlayerData = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PlayerData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PlayerData.prototype.uid = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    PlayerData.prototype.nickName = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    PlayerData.prototype.characterId = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PlayerData.prototype.roomId = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PlayerData.prototype.score = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PlayerData.prototype.ranking = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PlayerData.prototype.pos = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    PlayerData.prototype.dir = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    PlayerData.prototype.level = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PlayerData.prototype.maxHp = function () {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    PlayerData.prototype.hp = function () {
        var offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    PlayerData.prototype.weapons = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    PlayerData.prototype.weaponsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    PlayerData.prototype.weaponsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    PlayerData.prototype.passives = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    PlayerData.prototype.passivesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    PlayerData.prototype.passivesArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    PlayerData.prototype.pets = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    PlayerData.prototype.petsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    PlayerData.prototype.petsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    PlayerData.startPlayerData = function (builder) {
        builder.startObject(14);
    };
    PlayerData.addUid = function (builder, uid) {
        builder.addFieldInt32(0, uid, 0);
    };
    PlayerData.addNickName = function (builder, nickNameOffset) {
        builder.addFieldOffset(1, nickNameOffset, 0);
    };
    PlayerData.addCharacterId = function (builder, characterId) {
        builder.addFieldInt32(2, characterId, 0);
    };
    PlayerData.addRoomId = function (builder, roomId) {
        builder.addFieldInt32(3, roomId, 0);
    };
    PlayerData.addScore = function (builder, score) {
        builder.addFieldInt32(4, score, 0);
    };
    PlayerData.addRanking = function (builder, ranking) {
        builder.addFieldInt32(5, ranking, 0);
    };
    PlayerData.addPos = function (builder, posOffset) {
        builder.addFieldOffset(6, posOffset, 0);
    };
    PlayerData.addDir = function (builder, dirOffset) {
        builder.addFieldOffset(7, dirOffset, 0);
    };
    PlayerData.addLevel = function (builder, level) {
        builder.addFieldInt32(8, level, 0);
    };
    PlayerData.addMaxHp = function (builder, maxHp) {
        builder.addFieldFloat32(9, maxHp, 0.0);
    };
    PlayerData.addHp = function (builder, hp) {
        builder.addFieldFloat32(10, hp, 0.0);
    };
    PlayerData.addWeapons = function (builder, weaponsOffset) {
        builder.addFieldOffset(11, weaponsOffset, 0);
    };
    PlayerData.createWeaponsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    PlayerData.startWeaponsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    PlayerData.addPassives = function (builder, passivesOffset) {
        builder.addFieldOffset(12, passivesOffset, 0);
    };
    PlayerData.createPassivesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    PlayerData.startPassivesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    PlayerData.addPets = function (builder, petsOffset) {
        builder.addFieldOffset(13, petsOffset, 0);
    };
    PlayerData.createPetsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    PlayerData.startPetsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    PlayerData.endPlayerData = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    return PlayerData;
}());
exports.PlayerData = PlayerData;
