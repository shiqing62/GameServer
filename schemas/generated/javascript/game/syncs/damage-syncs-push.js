"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.DamageSyncsPush = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var vec3_js_1 = require("../../game/common/vec3.js");
var DamageSyncsPush = /** @class */ (function () {
    function DamageSyncsPush() {
        this.bb = null;
        this.bb_pos = 0;
    }
    DamageSyncsPush.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    DamageSyncsPush.getRootAsDamageSyncsPush = function (bb, obj) {
        return (obj || new DamageSyncsPush()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DamageSyncsPush.getSizePrefixedRootAsDamageSyncsPush = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DamageSyncsPush()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DamageSyncsPush.prototype.attackerId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    DamageSyncsPush.prototype.targetId = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    DamageSyncsPush.prototype.skillId = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    DamageSyncsPush.prototype.damage = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    DamageSyncsPush.prototype.pos = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    DamageSyncsPush.prototype.hp = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    DamageSyncsPush.startDamageSyncsPush = function (builder) {
        builder.startObject(6);
    };
    DamageSyncsPush.addAttackerId = function (builder, attackerId) {
        builder.addFieldInt32(0, attackerId, 0);
    };
    DamageSyncsPush.addTargetId = function (builder, targetId) {
        builder.addFieldInt32(1, targetId, 0);
    };
    DamageSyncsPush.addSkillId = function (builder, skillId) {
        builder.addFieldInt32(2, skillId, 0);
    };
    DamageSyncsPush.addDamage = function (builder, damage) {
        builder.addFieldFloat32(3, damage, 0.0);
    };
    DamageSyncsPush.addPos = function (builder, posOffset) {
        builder.addFieldOffset(4, posOffset, 0);
    };
    DamageSyncsPush.addHp = function (builder, hp) {
        builder.addFieldFloat32(5, hp, 0.0);
    };
    DamageSyncsPush.endDamageSyncsPush = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    DamageSyncsPush.finishDamageSyncsPushBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    DamageSyncsPush.finishSizePrefixedDamageSyncsPushBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    return DamageSyncsPush;
}());
exports.DamageSyncsPush = DamageSyncsPush;
