// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DeBuffParam } from '../../game/common/de-buff-param.js';


export class DeBuffSyncsRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DeBuffSyncsRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDeBuffSyncsRequest(bb:flatbuffers.ByteBuffer, obj?:DeBuffSyncsRequest):DeBuffSyncsRequest {
  return (obj || new DeBuffSyncsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDeBuffSyncsRequest(bb:flatbuffers.ByteBuffer, obj?:DeBuffSyncsRequest):DeBuffSyncsRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DeBuffSyncsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

attackerId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

targetId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

debuffId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

params(index: number, obj?:DeBuffParam):DeBuffParam|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new DeBuffParam()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

paramsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDeBuffSyncsRequest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addAttackerId(builder:flatbuffers.Builder, attackerId:number) {
  builder.addFieldInt32(0, attackerId, 0);
}

static addTargetId(builder:flatbuffers.Builder, targetId:number) {
  builder.addFieldInt32(1, targetId, 0);
}

static addDebuffId(builder:flatbuffers.Builder, debuffId:number) {
  builder.addFieldInt32(2, debuffId, 0);
}

static addParams(builder:flatbuffers.Builder, paramsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, paramsOffset, 0);
}

static createParamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startParamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDeBuffSyncsRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDeBuffSyncsRequestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedDeBuffSyncsRequestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createDeBuffSyncsRequest(builder:flatbuffers.Builder, attackerId:number, targetId:number, debuffId:number, paramsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DeBuffSyncsRequest.startDeBuffSyncsRequest(builder);
  DeBuffSyncsRequest.addAttackerId(builder, attackerId);
  DeBuffSyncsRequest.addTargetId(builder, targetId);
  DeBuffSyncsRequest.addDebuffId(builder, debuffId);
  DeBuffSyncsRequest.addParams(builder, paramsOffset);
  return DeBuffSyncsRequest.endDeBuffSyncsRequest(builder);
}
}
