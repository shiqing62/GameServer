// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Float4 } from '../../game/common/float4.js';


export class Float4Value {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Float4Value {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFloat4Value(bb:flatbuffers.ByteBuffer, obj?:Float4Value):Float4Value {
  return (obj || new Float4Value()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFloat4Value(bb:flatbuffers.ByteBuffer, obj?:Float4Value):Float4Value {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Float4Value()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

v(obj?:Float4):Float4|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Float4()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startFloat4Value(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addV(builder:flatbuffers.Builder, vOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, vOffset, 0);
}

static endFloat4Value(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFloat4Value(builder:flatbuffers.Builder, vOffset:flatbuffers.Offset):flatbuffers.Offset {
  Float4Value.startFloat4Value(builder);
  Float4Value.addV(builder, vOffset);
  return Float4Value.endFloat4Value(builder);
}
}
