// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vec3 } from '../../game/common/vec3.js';


export class MeleeData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MeleeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMeleeData(bb:flatbuffers.ByteBuffer, obj?:MeleeData):MeleeData {
  return (obj || new MeleeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMeleeData(bb:flatbuffers.ByteBuffer, obj?:MeleeData):MeleeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MeleeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

startPos(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

direction(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

lifeTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startMeleeData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addStartPos(builder:flatbuffers.Builder, startPosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, startPosOffset, 0);
}

static addDirection(builder:flatbuffers.Builder, directionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, directionOffset, 0);
}

static addLifeTime(builder:flatbuffers.Builder, lifeTime:number) {
  builder.addFieldFloat32(2, lifeTime, 0.0);
}

static endMeleeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
