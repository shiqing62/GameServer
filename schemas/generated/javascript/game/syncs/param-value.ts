// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { BoolValue } from '../../game/syncs/bool-value.js';
import { Float4Value } from '../../game/syncs/float4-value.js';
import { FloatValue } from '../../game/syncs/float-value.js';
import { IntValue } from '../../game/syncs/int-value.js';
import { UIntValue } from '../../game/syncs/uint-value.js';
import { Vec3Value } from '../../game/syncs/vec3-value.js';


export enum ParamValue {
  NONE = 0,
  IntValue = 1,
  UIntValue = 2,
  FloatValue = 3,
  BoolValue = 4,
  Vec3Value = 5,
  Float4Value = 6
}

export function unionToParamValue(
  type: ParamValue,
  accessor: (obj:BoolValue|Float4Value|FloatValue|IntValue|UIntValue|Vec3Value) => BoolValue|Float4Value|FloatValue|IntValue|UIntValue|Vec3Value|null
): BoolValue|Float4Value|FloatValue|IntValue|UIntValue|Vec3Value|null {
  switch(ParamValue[type]) {
    case 'NONE': return null; 
    case 'IntValue': return accessor(new IntValue())! as IntValue;
    case 'UIntValue': return accessor(new UIntValue())! as UIntValue;
    case 'FloatValue': return accessor(new FloatValue())! as FloatValue;
    case 'BoolValue': return accessor(new BoolValue())! as BoolValue;
    case 'Vec3Value': return accessor(new Vec3Value())! as Vec3Value;
    case 'Float4Value': return accessor(new Float4Value())! as Float4Value;
    default: return null;
  }
}

export function unionListToParamValue(
  type: ParamValue, 
  accessor: (index: number, obj:BoolValue|Float4Value|FloatValue|IntValue|UIntValue|Vec3Value) => BoolValue|Float4Value|FloatValue|IntValue|UIntValue|Vec3Value|null, 
  index: number
): BoolValue|Float4Value|FloatValue|IntValue|UIntValue|Vec3Value|null {
  switch(ParamValue[type]) {
    case 'NONE': return null; 
    case 'IntValue': return accessor(index, new IntValue())! as IntValue;
    case 'UIntValue': return accessor(index, new UIntValue())! as UIntValue;
    case 'FloatValue': return accessor(index, new FloatValue())! as FloatValue;
    case 'BoolValue': return accessor(index, new BoolValue())! as BoolValue;
    case 'Vec3Value': return accessor(index, new Vec3Value())! as Vec3Value;
    case 'Float4Value': return accessor(index, new Float4Value())! as Float4Value;
    default: return null;
  }
}
