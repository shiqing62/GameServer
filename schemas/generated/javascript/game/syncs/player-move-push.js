"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerMovePush = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var player_move_js_1 = require("../../game/syncs/player-move.js");
var PlayerMovePush = /** @class */ (function () {
    function PlayerMovePush() {
        this.bb = null;
        this.bb_pos = 0;
    }
    PlayerMovePush.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    PlayerMovePush.getRootAsPlayerMovePush = function (bb, obj) {
        return (obj || new PlayerMovePush()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PlayerMovePush.getSizePrefixedRootAsPlayerMovePush = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PlayerMovePush()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PlayerMovePush.prototype.playersPos = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new player_move_js_1.PlayerMove()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    PlayerMovePush.prototype.playersPosLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    PlayerMovePush.startPlayerMovePush = function (builder) {
        builder.startObject(1);
    };
    PlayerMovePush.addPlayersPos = function (builder, playersPosOffset) {
        builder.addFieldOffset(0, playersPosOffset, 0);
    };
    PlayerMovePush.createPlayersPosVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    PlayerMovePush.startPlayersPosVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    PlayerMovePush.endPlayerMovePush = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    PlayerMovePush.createPlayerMovePush = function (builder, playersPosOffset) {
        PlayerMovePush.startPlayerMovePush(builder);
        PlayerMovePush.addPlayersPos(builder, playersPosOffset);
        return PlayerMovePush.endPlayerMovePush(builder);
    };
    return PlayerMovePush;
}());
exports.PlayerMovePush = PlayerMovePush;
