"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectileData = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var vec3_js_1 = require("../../game/common/vec3.js");
var ProjectileData = /** @class */ (function () {
    function ProjectileData() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ProjectileData.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ProjectileData.getRootAsProjectileData = function (bb, obj) {
        return (obj || new ProjectileData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ProjectileData.getSizePrefixedRootAsProjectileData = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ProjectileData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ProjectileData.prototype.startPos = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    ProjectileData.prototype.direction = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    ProjectileData.prototype.speed = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    ProjectileData.prototype.lifeTime = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    ProjectileData.startProjectileData = function (builder) {
        builder.startObject(4);
    };
    ProjectileData.addStartPos = function (builder, startPosOffset) {
        builder.addFieldOffset(0, startPosOffset, 0);
    };
    ProjectileData.addDirection = function (builder, directionOffset) {
        builder.addFieldOffset(1, directionOffset, 0);
    };
    ProjectileData.addSpeed = function (builder, speed) {
        builder.addFieldFloat32(2, speed, 0.0);
    };
    ProjectileData.addLifeTime = function (builder, lifeTime) {
        builder.addFieldFloat32(3, lifeTime, 0.0);
    };
    ProjectileData.endProjectileData = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    return ProjectileData;
}());
exports.ProjectileData = ProjectileData;
