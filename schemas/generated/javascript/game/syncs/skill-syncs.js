"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkillSyncs = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var skill_data_js_1 = require("../../game/syncs/skill-data.js");
var skill_type_js_1 = require("../../game/syncs/skill-type.js");
var SkillSyncs = /** @class */ (function () {
    function SkillSyncs() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SkillSyncs.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SkillSyncs.getRootAsSkillSyncs = function (bb, obj) {
        return (obj || new SkillSyncs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SkillSyncs.getSizePrefixedRootAsSkillSyncs = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SkillSyncs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SkillSyncs.prototype.attackerId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    SkillSyncs.prototype.targetId = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    SkillSyncs.prototype.skillId = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SkillSyncs.prototype.skillType = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : skill_type_js_1.SkillType.Projectile;
    };
    SkillSyncs.prototype.skillDataType = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : skill_data_js_1.SkillData.NONE;
    };
    SkillSyncs.prototype.skillData = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    SkillSyncs.prototype.scaleFactor = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    SkillSyncs.startSkillSyncs = function (builder) {
        builder.startObject(7);
    };
    SkillSyncs.addAttackerId = function (builder, attackerId) {
        builder.addFieldInt32(0, attackerId, 0);
    };
    SkillSyncs.addTargetId = function (builder, targetId) {
        builder.addFieldInt32(1, targetId, 0);
    };
    SkillSyncs.addSkillId = function (builder, skillId) {
        builder.addFieldInt32(2, skillId, 0);
    };
    SkillSyncs.addSkillType = function (builder, skillType) {
        builder.addFieldInt8(3, skillType, skill_type_js_1.SkillType.Projectile);
    };
    SkillSyncs.addSkillDataType = function (builder, skillDataType) {
        builder.addFieldInt8(4, skillDataType, skill_data_js_1.SkillData.NONE);
    };
    SkillSyncs.addSkillData = function (builder, skillDataOffset) {
        builder.addFieldOffset(5, skillDataOffset, 0);
    };
    SkillSyncs.addScaleFactor = function (builder, scaleFactor) {
        builder.addFieldFloat32(6, scaleFactor, 0.0);
    };
    SkillSyncs.endSkillSyncs = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SkillSyncs.finishSkillSyncsBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    SkillSyncs.finishSizePrefixedSkillSyncsBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    SkillSyncs.createSkillSyncs = function (builder, attackerId, targetId, skillId, skillType, skillDataType, skillDataOffset, scaleFactor) {
        SkillSyncs.startSkillSyncs(builder);
        SkillSyncs.addAttackerId(builder, attackerId);
        SkillSyncs.addTargetId(builder, targetId);
        SkillSyncs.addSkillId(builder, skillId);
        SkillSyncs.addSkillType(builder, skillType);
        SkillSyncs.addSkillDataType(builder, skillDataType);
        SkillSyncs.addSkillData(builder, skillDataOffset);
        SkillSyncs.addScaleFactor(builder, scaleFactor);
        return SkillSyncs.endSkillSyncs(builder);
    };
    return SkillSyncs;
}());
exports.SkillSyncs = SkillSyncs;
